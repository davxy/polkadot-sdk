
//! Autogenerated weights for `pallet_sassafras`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-08, STEPS: `20`, REPEAT: `3`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `behemoth`, CPU: `AMD Ryzen Threadripper 3970X 32-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_sassafras
// --extrinsic
// *
// --steps
// 20
// --repeat
// 3
// --output
// weights.rs
// --template
// substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_sassafras`.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn enact_epoch_change(x: u32, y: u32, ) -> Weight;
	fn submit_tickets(x: u32, ) -> Weight;
	fn update_ring_verifier(x: u32, ) -> Weight;
	fn load_ring_context() -> Weight;
}

/// Weights for `pallet_sassafras` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Sassafras::RandomnessBuf` (r:1 w:1)
	/// Proof: `Sassafras::RandomnessBuf` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CounterForTicketsAccumulator` (r:1 w:0)
	/// Proof: `Sassafras::CounterForTicketsAccumulator` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CurrentSlot` (r:0 w:1)
	/// Proof: `Sassafras::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::PostInitCache` (r:0 w:1)
	/// Proof: `Sassafras::PostInitCache` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `270`
		//  Estimated: `1755`
		// Minimum execution time: 427_910_000 picoseconds.
		Weight::from_parts(428_451_000, 1755)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Sassafras::CurrentSlot` (r:1 w:0)
	/// Proof: `Sassafras::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::NextAuthorities` (r:1 w:1)
	/// Proof: `Sassafras::NextAuthorities` (`max_values`: Some(1), `max_size`: Some(3302), added: 3797, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingContext` (r:1 w:0)
	/// Proof: `Sassafras::RingContext` (`max_values`: Some(1), `max_size`: Some(590324), added: 590819, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::EpochIndex` (r:1 w:1)
	/// Proof: `Sassafras::EpochIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RandomnessBuf` (r:1 w:1)
	/// Proof: `Sassafras::RandomnessBuf` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Sassafras::TicketsMeta` (r:1 w:1)
	/// Proof: `Sassafras::TicketsMeta` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CounterForTicketsAccumulator` (r:1 w:1)
	/// Proof: `Sassafras::CounterForTicketsAccumulator` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::TicketsAccumulator` (r:1001 w:1000)
	/// Proof: `Sassafras::TicketsAccumulator` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::Tickets` (r:0 w:1000)
	/// Proof: `Sassafras::Tickets` (`max_values`: None, `max_size`: Some(171), added: 2646, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::Authorities` (r:0 w:1)
	/// Proof: `Sassafras::Authorities` (`max_values`: Some(1), `max_size`: Some(3302), added: 3797, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingVerifierKey` (r:0 w:1)
	/// Proof: `Sassafras::RingVerifierKey` (`max_values`: Some(1), `max_size`: Some(388), added: 883, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 100]`.
	/// The range of component `y` is `[100, 1000]`.
	fn enact_epoch_change(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590548 + x * (33 ±0) + y * (37 ±0)`
		//  Estimated: `592034 + x * (33 ±0) + y * (2641 ±0)`
		// Minimum execution time: 138_951_898_000 picoseconds.
		Weight::from_parts(135_719_523_137, 592034)
			// Standard Error: 5_842_563
			.saturating_add(Weight::from_parts(154_854_264, 0).saturating_mul(x.into()))
			// Standard Error: 645_250
			.saturating_add(Weight::from_parts(4_311_218, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2641).saturating_mul(y.into()))
	}
	/// Storage: `Sassafras::CurrentSlot` (r:1 w:0)
	/// Proof: `Sassafras::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingVerifierKey` (r:1 w:0)
	/// Proof: `Sassafras::RingVerifierKey` (`max_values`: Some(1), `max_size`: Some(388), added: 883, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RandomnessBuf` (r:1 w:0)
	/// Proof: `Sassafras::RandomnessBuf` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::NextAuthorities` (r:1 w:0)
	/// Proof: `Sassafras::NextAuthorities` (`max_values`: Some(1), `max_size`: Some(3302), added: 3797, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CounterForTicketsAccumulator` (r:1 w:1)
	/// Proof: `Sassafras::CounterForTicketsAccumulator` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::TicketsAccumulator` (r:20 w:20)
	/// Proof: `Sassafras::TicketsAccumulator` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 20]`.
	fn submit_tickets(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1029`
		//  Estimated: `4787 + x * (2641 ±0)`
		// Minimum execution time: 52_109_411_000 picoseconds.
		Weight::from_parts(38_584_018_164, 4787)
			// Standard Error: 62_507_167
			.saturating_add(Weight::from_parts(14_381_572_906, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2641).saturating_mul(x.into()))
	}
	/// Storage: `Sassafras::RingContext` (r:1 w:0)
	/// Proof: `Sassafras::RingContext` (`max_values`: Some(1), `max_size`: Some(590324), added: 590819, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingVerifierKey` (r:0 w:1)
	/// Proof: `Sassafras::RingVerifierKey` (`max_values`: Some(1), `max_size`: Some(388), added: 883, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 100]`.
	fn update_ring_verifier(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590458`
		//  Estimated: `591809`
		// Minimum execution time: 131_132_781_000 picoseconds.
		Weight::from_parts(132_019_264_471, 591809)
			// Standard Error: 7_012_691
			.saturating_add(Weight::from_parts(195_019_609, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Sassafras::RingContext` (r:1 w:0)
	/// Proof: `Sassafras::RingContext` (`max_values`: Some(1), `max_size`: Some(590324), added: 590819, mode: `MaxEncodedLen`)
	fn load_ring_context() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590458`
		//  Estimated: `591809`
		// Minimum execution time: 55_893_928_000 picoseconds.
		Weight::from_parts(56_862_553_000, 591809)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Sassafras::RandomnessBuf` (r:1 w:1)
	/// Proof: `Sassafras::RandomnessBuf` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CounterForTicketsAccumulator` (r:1 w:0)
	/// Proof: `Sassafras::CounterForTicketsAccumulator` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CurrentSlot` (r:0 w:1)
	/// Proof: `Sassafras::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::PostInitCache` (r:0 w:1)
	/// Proof: `Sassafras::PostInitCache` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `270`
		//  Estimated: `1755`
		// Minimum execution time: 427_910_000 picoseconds.
		Weight::from_parts(428_451_000, 1755)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Sassafras::CurrentSlot` (r:1 w:0)
	/// Proof: `Sassafras::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::NextAuthorities` (r:1 w:1)
	/// Proof: `Sassafras::NextAuthorities` (`max_values`: Some(1), `max_size`: Some(3302), added: 3797, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingContext` (r:1 w:0)
	/// Proof: `Sassafras::RingContext` (`max_values`: Some(1), `max_size`: Some(590324), added: 590819, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::EpochIndex` (r:1 w:1)
	/// Proof: `Sassafras::EpochIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RandomnessBuf` (r:1 w:1)
	/// Proof: `Sassafras::RandomnessBuf` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Sassafras::TicketsMeta` (r:1 w:1)
	/// Proof: `Sassafras::TicketsMeta` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CounterForTicketsAccumulator` (r:1 w:1)
	/// Proof: `Sassafras::CounterForTicketsAccumulator` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::TicketsAccumulator` (r:1001 w:1000)
	/// Proof: `Sassafras::TicketsAccumulator` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::Tickets` (r:0 w:1000)
	/// Proof: `Sassafras::Tickets` (`max_values`: None, `max_size`: Some(171), added: 2646, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::Authorities` (r:0 w:1)
	/// Proof: `Sassafras::Authorities` (`max_values`: Some(1), `max_size`: Some(3302), added: 3797, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingVerifierKey` (r:0 w:1)
	/// Proof: `Sassafras::RingVerifierKey` (`max_values`: Some(1), `max_size`: Some(388), added: 883, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 100]`.
	/// The range of component `y` is `[100, 1000]`.
	fn enact_epoch_change(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590548 + x * (33 ±0) + y * (37 ±0)`
		//  Estimated: `592034 + x * (33 ±0) + y * (2641 ±0)`
		// Minimum execution time: 138_951_898_000 picoseconds.
		Weight::from_parts(135_719_523_137, 592034)
			// Standard Error: 5_842_563
			.saturating_add(Weight::from_parts(154_854_264, 0).saturating_mul(x.into()))
			// Standard Error: 645_250
			.saturating_add(Weight::from_parts(4_311_218, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2641).saturating_mul(y.into()))
	}
	/// Storage: `Sassafras::CurrentSlot` (r:1 w:0)
	/// Proof: `Sassafras::CurrentSlot` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingVerifierKey` (r:1 w:0)
	/// Proof: `Sassafras::RingVerifierKey` (`max_values`: Some(1), `max_size`: Some(388), added: 883, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RandomnessBuf` (r:1 w:0)
	/// Proof: `Sassafras::RandomnessBuf` (`max_values`: Some(1), `max_size`: Some(128), added: 623, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::NextAuthorities` (r:1 w:0)
	/// Proof: `Sassafras::NextAuthorities` (`max_values`: Some(1), `max_size`: Some(3302), added: 3797, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::CounterForTicketsAccumulator` (r:1 w:1)
	/// Proof: `Sassafras::CounterForTicketsAccumulator` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::TicketsAccumulator` (r:20 w:20)
	/// Proof: `Sassafras::TicketsAccumulator` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 20]`.
	fn submit_tickets(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1029`
		//  Estimated: `4787 + x * (2641 ±0)`
		// Minimum execution time: 52_109_411_000 picoseconds.
		Weight::from_parts(38_584_018_164, 4787)
			// Standard Error: 62_507_167
			.saturating_add(Weight::from_parts(14_381_572_906, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2641).saturating_mul(x.into()))
	}
	/// Storage: `Sassafras::RingContext` (r:1 w:0)
	/// Proof: `Sassafras::RingContext` (`max_values`: Some(1), `max_size`: Some(590324), added: 590819, mode: `MaxEncodedLen`)
	/// Storage: `Sassafras::RingVerifierKey` (r:0 w:1)
	/// Proof: `Sassafras::RingVerifierKey` (`max_values`: Some(1), `max_size`: Some(388), added: 883, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 100]`.
	fn update_ring_verifier(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590458`
		//  Estimated: `591809`
		// Minimum execution time: 131_132_781_000 picoseconds.
		Weight::from_parts(132_019_264_471, 591809)
			// Standard Error: 7_012_691
			.saturating_add(Weight::from_parts(195_019_609, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Sassafras::RingContext` (r:1 w:0)
	/// Proof: `Sassafras::RingContext` (`max_values`: Some(1), `max_size`: Some(590324), added: 590819, mode: `MaxEncodedLen`)
	fn load_ring_context() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590458`
		//  Estimated: `591809`
		// Minimum execution time: 55_893_928_000 picoseconds.
		Weight::from_parts(56_862_553_000, 591809)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
